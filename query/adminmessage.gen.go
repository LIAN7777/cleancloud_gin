// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GinProject/model"
)

func newAdminmessage(db *gorm.DB, opts ...gen.DOOption) adminmessage {
	_adminmessage := adminmessage{}

	_adminmessage.adminmessageDo.UseDB(db, opts...)
	_adminmessage.adminmessageDo.UseModel(&model.Adminmessage{})

	tableName := _adminmessage.adminmessageDo.TableName()
	_adminmessage.ALL = field.NewAsterisk(tableName)
	_adminmessage.AdminID = field.NewInt64(tableName, "admin_id")
	_adminmessage.Time = field.NewString(tableName, "time")
	_adminmessage.Source = field.NewString(tableName, "source")
	_adminmessage.Content = field.NewString(tableName, "content")
	_adminmessage.MessageID = field.NewInt64(tableName, "message_id")

	_adminmessage.fillFieldMap()

	return _adminmessage
}

type adminmessage struct {
	adminmessageDo adminmessageDo

	ALL       field.Asterisk
	AdminID   field.Int64
	Time      field.String
	Source    field.String
	Content   field.String
	MessageID field.Int64

	fieldMap map[string]field.Expr
}

func (a adminmessage) Table(newTableName string) *adminmessage {
	a.adminmessageDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminmessage) As(alias string) *adminmessage {
	a.adminmessageDo.DO = *(a.adminmessageDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminmessage) updateTableName(table string) *adminmessage {
	a.ALL = field.NewAsterisk(table)
	a.AdminID = field.NewInt64(table, "admin_id")
	a.Time = field.NewString(table, "time")
	a.Source = field.NewString(table, "source")
	a.Content = field.NewString(table, "content")
	a.MessageID = field.NewInt64(table, "message_id")

	a.fillFieldMap()

	return a
}

func (a *adminmessage) WithContext(ctx context.Context) IAdminmessageDo {
	return a.adminmessageDo.WithContext(ctx)
}

func (a adminmessage) TableName() string { return a.adminmessageDo.TableName() }

func (a adminmessage) Alias() string { return a.adminmessageDo.Alias() }

func (a adminmessage) Columns(cols ...field.Expr) gen.Columns {
	return a.adminmessageDo.Columns(cols...)
}

func (a *adminmessage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminmessage) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["admin_id"] = a.AdminID
	a.fieldMap["time"] = a.Time
	a.fieldMap["source"] = a.Source
	a.fieldMap["content"] = a.Content
	a.fieldMap["message_id"] = a.MessageID
}

func (a adminmessage) clone(db *gorm.DB) adminmessage {
	a.adminmessageDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminmessage) replaceDB(db *gorm.DB) adminmessage {
	a.adminmessageDo.ReplaceDB(db)
	return a
}

type adminmessageDo struct{ gen.DO }

type IAdminmessageDo interface {
	gen.SubQuery
	Debug() IAdminmessageDo
	WithContext(ctx context.Context) IAdminmessageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminmessageDo
	WriteDB() IAdminmessageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminmessageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminmessageDo
	Not(conds ...gen.Condition) IAdminmessageDo
	Or(conds ...gen.Condition) IAdminmessageDo
	Select(conds ...field.Expr) IAdminmessageDo
	Where(conds ...gen.Condition) IAdminmessageDo
	Order(conds ...field.Expr) IAdminmessageDo
	Distinct(cols ...field.Expr) IAdminmessageDo
	Omit(cols ...field.Expr) IAdminmessageDo
	Join(table schema.Tabler, on ...field.Expr) IAdminmessageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminmessageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminmessageDo
	Group(cols ...field.Expr) IAdminmessageDo
	Having(conds ...gen.Condition) IAdminmessageDo
	Limit(limit int) IAdminmessageDo
	Offset(offset int) IAdminmessageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminmessageDo
	Unscoped() IAdminmessageDo
	Create(values ...*model.Adminmessage) error
	CreateInBatches(values []*model.Adminmessage, batchSize int) error
	Save(values ...*model.Adminmessage) error
	First() (*model.Adminmessage, error)
	Take() (*model.Adminmessage, error)
	Last() (*model.Adminmessage, error)
	Find() ([]*model.Adminmessage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Adminmessage, err error)
	FindInBatches(result *[]*model.Adminmessage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Adminmessage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminmessageDo
	Assign(attrs ...field.AssignExpr) IAdminmessageDo
	Joins(fields ...field.RelationField) IAdminmessageDo
	Preload(fields ...field.RelationField) IAdminmessageDo
	FirstOrInit() (*model.Adminmessage, error)
	FirstOrCreate() (*model.Adminmessage, error)
	FindByPage(offset int, limit int) (result []*model.Adminmessage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminmessageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminmessageDo) Debug() IAdminmessageDo {
	return a.withDO(a.DO.Debug())
}

func (a adminmessageDo) WithContext(ctx context.Context) IAdminmessageDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminmessageDo) ReadDB() IAdminmessageDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminmessageDo) WriteDB() IAdminmessageDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminmessageDo) Session(config *gorm.Session) IAdminmessageDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminmessageDo) Clauses(conds ...clause.Expression) IAdminmessageDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminmessageDo) Returning(value interface{}, columns ...string) IAdminmessageDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminmessageDo) Not(conds ...gen.Condition) IAdminmessageDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminmessageDo) Or(conds ...gen.Condition) IAdminmessageDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminmessageDo) Select(conds ...field.Expr) IAdminmessageDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminmessageDo) Where(conds ...gen.Condition) IAdminmessageDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminmessageDo) Order(conds ...field.Expr) IAdminmessageDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminmessageDo) Distinct(cols ...field.Expr) IAdminmessageDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminmessageDo) Omit(cols ...field.Expr) IAdminmessageDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminmessageDo) Join(table schema.Tabler, on ...field.Expr) IAdminmessageDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminmessageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminmessageDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminmessageDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminmessageDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminmessageDo) Group(cols ...field.Expr) IAdminmessageDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminmessageDo) Having(conds ...gen.Condition) IAdminmessageDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminmessageDo) Limit(limit int) IAdminmessageDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminmessageDo) Offset(offset int) IAdminmessageDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminmessageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminmessageDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminmessageDo) Unscoped() IAdminmessageDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminmessageDo) Create(values ...*model.Adminmessage) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminmessageDo) CreateInBatches(values []*model.Adminmessage, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminmessageDo) Save(values ...*model.Adminmessage) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminmessageDo) First() (*model.Adminmessage, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Adminmessage), nil
	}
}

func (a adminmessageDo) Take() (*model.Adminmessage, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Adminmessage), nil
	}
}

func (a adminmessageDo) Last() (*model.Adminmessage, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Adminmessage), nil
	}
}

func (a adminmessageDo) Find() ([]*model.Adminmessage, error) {
	result, err := a.DO.Find()
	return result.([]*model.Adminmessage), err
}

func (a adminmessageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Adminmessage, err error) {
	buf := make([]*model.Adminmessage, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminmessageDo) FindInBatches(result *[]*model.Adminmessage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminmessageDo) Attrs(attrs ...field.AssignExpr) IAdminmessageDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminmessageDo) Assign(attrs ...field.AssignExpr) IAdminmessageDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminmessageDo) Joins(fields ...field.RelationField) IAdminmessageDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminmessageDo) Preload(fields ...field.RelationField) IAdminmessageDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminmessageDo) FirstOrInit() (*model.Adminmessage, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Adminmessage), nil
	}
}

func (a adminmessageDo) FirstOrCreate() (*model.Adminmessage, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Adminmessage), nil
	}
}

func (a adminmessageDo) FindByPage(offset int, limit int) (result []*model.Adminmessage, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminmessageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminmessageDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminmessageDo) Delete(models ...*model.Adminmessage) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminmessageDo) withDO(do gen.Dao) *adminmessageDo {
	a.DO = *do.(*gen.DO)
	return a
}
