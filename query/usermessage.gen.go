// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GinProject/model"
)

func newUsermessage(db *gorm.DB, opts ...gen.DOOption) usermessage {
	_usermessage := usermessage{}

	_usermessage.usermessageDo.UseDB(db, opts...)
	_usermessage.usermessageDo.UseModel(&model.Usermessage{})

	tableName := _usermessage.usermessageDo.TableName()
	_usermessage.ALL = field.NewAsterisk(tableName)
	_usermessage.UserMessageID = field.NewInt64(tableName, "user_message_id")
	_usermessage.UserID = field.NewInt64(tableName, "user_id")
	_usermessage.Content = field.NewString(tableName, "content")
	_usermessage.Source = field.NewString(tableName, "source")
	_usermessage.Time = field.NewString(tableName, "time")

	_usermessage.fillFieldMap()

	return _usermessage
}

type usermessage struct {
	usermessageDo usermessageDo

	ALL           field.Asterisk
	UserMessageID field.Int64
	UserID        field.Int64
	Content       field.String
	Source        field.String
	Time          field.String

	fieldMap map[string]field.Expr
}

func (u usermessage) Table(newTableName string) *usermessage {
	u.usermessageDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u usermessage) As(alias string) *usermessage {
	u.usermessageDo.DO = *(u.usermessageDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *usermessage) updateTableName(table string) *usermessage {
	u.ALL = field.NewAsterisk(table)
	u.UserMessageID = field.NewInt64(table, "user_message_id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Content = field.NewString(table, "content")
	u.Source = field.NewString(table, "source")
	u.Time = field.NewString(table, "time")

	u.fillFieldMap()

	return u
}

func (u *usermessage) WithContext(ctx context.Context) IUsermessageDo {
	return u.usermessageDo.WithContext(ctx)
}

func (u usermessage) TableName() string { return u.usermessageDo.TableName() }

func (u usermessage) Alias() string { return u.usermessageDo.Alias() }

func (u usermessage) Columns(cols ...field.Expr) gen.Columns { return u.usermessageDo.Columns(cols...) }

func (u *usermessage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *usermessage) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 5)
	u.fieldMap["user_message_id"] = u.UserMessageID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["content"] = u.Content
	u.fieldMap["source"] = u.Source
	u.fieldMap["time"] = u.Time
}

func (u usermessage) clone(db *gorm.DB) usermessage {
	u.usermessageDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u usermessage) replaceDB(db *gorm.DB) usermessage {
	u.usermessageDo.ReplaceDB(db)
	return u
}

type usermessageDo struct{ gen.DO }

type IUsermessageDo interface {
	gen.SubQuery
	Debug() IUsermessageDo
	WithContext(ctx context.Context) IUsermessageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUsermessageDo
	WriteDB() IUsermessageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUsermessageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUsermessageDo
	Not(conds ...gen.Condition) IUsermessageDo
	Or(conds ...gen.Condition) IUsermessageDo
	Select(conds ...field.Expr) IUsermessageDo
	Where(conds ...gen.Condition) IUsermessageDo
	Order(conds ...field.Expr) IUsermessageDo
	Distinct(cols ...field.Expr) IUsermessageDo
	Omit(cols ...field.Expr) IUsermessageDo
	Join(table schema.Tabler, on ...field.Expr) IUsermessageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUsermessageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUsermessageDo
	Group(cols ...field.Expr) IUsermessageDo
	Having(conds ...gen.Condition) IUsermessageDo
	Limit(limit int) IUsermessageDo
	Offset(offset int) IUsermessageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUsermessageDo
	Unscoped() IUsermessageDo
	Create(values ...*model.Usermessage) error
	CreateInBatches(values []*model.Usermessage, batchSize int) error
	Save(values ...*model.Usermessage) error
	First() (*model.Usermessage, error)
	Take() (*model.Usermessage, error)
	Last() (*model.Usermessage, error)
	Find() ([]*model.Usermessage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Usermessage, err error)
	FindInBatches(result *[]*model.Usermessage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Usermessage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUsermessageDo
	Assign(attrs ...field.AssignExpr) IUsermessageDo
	Joins(fields ...field.RelationField) IUsermessageDo
	Preload(fields ...field.RelationField) IUsermessageDo
	FirstOrInit() (*model.Usermessage, error)
	FirstOrCreate() (*model.Usermessage, error)
	FindByPage(offset int, limit int) (result []*model.Usermessage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUsermessageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u usermessageDo) Debug() IUsermessageDo {
	return u.withDO(u.DO.Debug())
}

func (u usermessageDo) WithContext(ctx context.Context) IUsermessageDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u usermessageDo) ReadDB() IUsermessageDo {
	return u.Clauses(dbresolver.Read)
}

func (u usermessageDo) WriteDB() IUsermessageDo {
	return u.Clauses(dbresolver.Write)
}

func (u usermessageDo) Session(config *gorm.Session) IUsermessageDo {
	return u.withDO(u.DO.Session(config))
}

func (u usermessageDo) Clauses(conds ...clause.Expression) IUsermessageDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u usermessageDo) Returning(value interface{}, columns ...string) IUsermessageDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u usermessageDo) Not(conds ...gen.Condition) IUsermessageDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u usermessageDo) Or(conds ...gen.Condition) IUsermessageDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u usermessageDo) Select(conds ...field.Expr) IUsermessageDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u usermessageDo) Where(conds ...gen.Condition) IUsermessageDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u usermessageDo) Order(conds ...field.Expr) IUsermessageDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u usermessageDo) Distinct(cols ...field.Expr) IUsermessageDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u usermessageDo) Omit(cols ...field.Expr) IUsermessageDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u usermessageDo) Join(table schema.Tabler, on ...field.Expr) IUsermessageDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u usermessageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUsermessageDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u usermessageDo) RightJoin(table schema.Tabler, on ...field.Expr) IUsermessageDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u usermessageDo) Group(cols ...field.Expr) IUsermessageDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u usermessageDo) Having(conds ...gen.Condition) IUsermessageDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u usermessageDo) Limit(limit int) IUsermessageDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u usermessageDo) Offset(offset int) IUsermessageDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u usermessageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUsermessageDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u usermessageDo) Unscoped() IUsermessageDo {
	return u.withDO(u.DO.Unscoped())
}

func (u usermessageDo) Create(values ...*model.Usermessage) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u usermessageDo) CreateInBatches(values []*model.Usermessage, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u usermessageDo) Save(values ...*model.Usermessage) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u usermessageDo) First() (*model.Usermessage, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Usermessage), nil
	}
}

func (u usermessageDo) Take() (*model.Usermessage, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Usermessage), nil
	}
}

func (u usermessageDo) Last() (*model.Usermessage, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Usermessage), nil
	}
}

func (u usermessageDo) Find() ([]*model.Usermessage, error) {
	result, err := u.DO.Find()
	return result.([]*model.Usermessage), err
}

func (u usermessageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Usermessage, err error) {
	buf := make([]*model.Usermessage, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u usermessageDo) FindInBatches(result *[]*model.Usermessage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u usermessageDo) Attrs(attrs ...field.AssignExpr) IUsermessageDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u usermessageDo) Assign(attrs ...field.AssignExpr) IUsermessageDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u usermessageDo) Joins(fields ...field.RelationField) IUsermessageDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u usermessageDo) Preload(fields ...field.RelationField) IUsermessageDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u usermessageDo) FirstOrInit() (*model.Usermessage, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Usermessage), nil
	}
}

func (u usermessageDo) FirstOrCreate() (*model.Usermessage, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Usermessage), nil
	}
}

func (u usermessageDo) FindByPage(offset int, limit int) (result []*model.Usermessage, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u usermessageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u usermessageDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u usermessageDo) Delete(models ...*model.Usermessage) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *usermessageDo) withDO(do gen.Dao) *usermessageDo {
	u.DO = *do.(*gen.DO)
	return u
}
