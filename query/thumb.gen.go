// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GinProject/model"
)

func newThumb(db *gorm.DB, opts ...gen.DOOption) thumb {
	_thumb := thumb{}

	_thumb.thumbDo.UseDB(db, opts...)
	_thumb.thumbDo.UseModel(&model.Thumb{})

	tableName := _thumb.thumbDo.TableName()
	_thumb.ALL = field.NewAsterisk(tableName)
	_thumb.UserID = field.NewInt64(tableName, "userId")
	_thumb.BlogID = field.NewInt64(tableName, "blogId")

	_thumb.fillFieldMap()

	return _thumb
}

type thumb struct {
	thumbDo thumbDo

	ALL    field.Asterisk
	UserID field.Int64
	BlogID field.Int64

	fieldMap map[string]field.Expr
}

func (t thumb) Table(newTableName string) *thumb {
	t.thumbDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t thumb) As(alias string) *thumb {
	t.thumbDo.DO = *(t.thumbDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *thumb) updateTableName(table string) *thumb {
	t.ALL = field.NewAsterisk(table)
	t.UserID = field.NewInt64(table, "userId")
	t.BlogID = field.NewInt64(table, "blogId")

	t.fillFieldMap()

	return t
}

func (t *thumb) WithContext(ctx context.Context) IThumbDo { return t.thumbDo.WithContext(ctx) }

func (t thumb) TableName() string { return t.thumbDo.TableName() }

func (t thumb) Alias() string { return t.thumbDo.Alias() }

func (t thumb) Columns(cols ...field.Expr) gen.Columns { return t.thumbDo.Columns(cols...) }

func (t *thumb) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *thumb) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 2)
	t.fieldMap["userId"] = t.UserID
	t.fieldMap["blogId"] = t.BlogID
}

func (t thumb) clone(db *gorm.DB) thumb {
	t.thumbDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t thumb) replaceDB(db *gorm.DB) thumb {
	t.thumbDo.ReplaceDB(db)
	return t
}

type thumbDo struct{ gen.DO }

type IThumbDo interface {
	gen.SubQuery
	Debug() IThumbDo
	WithContext(ctx context.Context) IThumbDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IThumbDo
	WriteDB() IThumbDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IThumbDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IThumbDo
	Not(conds ...gen.Condition) IThumbDo
	Or(conds ...gen.Condition) IThumbDo
	Select(conds ...field.Expr) IThumbDo
	Where(conds ...gen.Condition) IThumbDo
	Order(conds ...field.Expr) IThumbDo
	Distinct(cols ...field.Expr) IThumbDo
	Omit(cols ...field.Expr) IThumbDo
	Join(table schema.Tabler, on ...field.Expr) IThumbDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IThumbDo
	RightJoin(table schema.Tabler, on ...field.Expr) IThumbDo
	Group(cols ...field.Expr) IThumbDo
	Having(conds ...gen.Condition) IThumbDo
	Limit(limit int) IThumbDo
	Offset(offset int) IThumbDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IThumbDo
	Unscoped() IThumbDo
	Create(values ...*model.Thumb) error
	CreateInBatches(values []*model.Thumb, batchSize int) error
	Save(values ...*model.Thumb) error
	First() (*model.Thumb, error)
	Take() (*model.Thumb, error)
	Last() (*model.Thumb, error)
	Find() ([]*model.Thumb, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Thumb, err error)
	FindInBatches(result *[]*model.Thumb, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Thumb) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IThumbDo
	Assign(attrs ...field.AssignExpr) IThumbDo
	Joins(fields ...field.RelationField) IThumbDo
	Preload(fields ...field.RelationField) IThumbDo
	FirstOrInit() (*model.Thumb, error)
	FirstOrCreate() (*model.Thumb, error)
	FindByPage(offset int, limit int) (result []*model.Thumb, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IThumbDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t thumbDo) Debug() IThumbDo {
	return t.withDO(t.DO.Debug())
}

func (t thumbDo) WithContext(ctx context.Context) IThumbDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t thumbDo) ReadDB() IThumbDo {
	return t.Clauses(dbresolver.Read)
}

func (t thumbDo) WriteDB() IThumbDo {
	return t.Clauses(dbresolver.Write)
}

func (t thumbDo) Session(config *gorm.Session) IThumbDo {
	return t.withDO(t.DO.Session(config))
}

func (t thumbDo) Clauses(conds ...clause.Expression) IThumbDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t thumbDo) Returning(value interface{}, columns ...string) IThumbDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t thumbDo) Not(conds ...gen.Condition) IThumbDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t thumbDo) Or(conds ...gen.Condition) IThumbDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t thumbDo) Select(conds ...field.Expr) IThumbDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t thumbDo) Where(conds ...gen.Condition) IThumbDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t thumbDo) Order(conds ...field.Expr) IThumbDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t thumbDo) Distinct(cols ...field.Expr) IThumbDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t thumbDo) Omit(cols ...field.Expr) IThumbDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t thumbDo) Join(table schema.Tabler, on ...field.Expr) IThumbDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t thumbDo) LeftJoin(table schema.Tabler, on ...field.Expr) IThumbDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t thumbDo) RightJoin(table schema.Tabler, on ...field.Expr) IThumbDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t thumbDo) Group(cols ...field.Expr) IThumbDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t thumbDo) Having(conds ...gen.Condition) IThumbDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t thumbDo) Limit(limit int) IThumbDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t thumbDo) Offset(offset int) IThumbDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t thumbDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IThumbDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t thumbDo) Unscoped() IThumbDo {
	return t.withDO(t.DO.Unscoped())
}

func (t thumbDo) Create(values ...*model.Thumb) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t thumbDo) CreateInBatches(values []*model.Thumb, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t thumbDo) Save(values ...*model.Thumb) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t thumbDo) First() (*model.Thumb, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Thumb), nil
	}
}

func (t thumbDo) Take() (*model.Thumb, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Thumb), nil
	}
}

func (t thumbDo) Last() (*model.Thumb, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Thumb), nil
	}
}

func (t thumbDo) Find() ([]*model.Thumb, error) {
	result, err := t.DO.Find()
	return result.([]*model.Thumb), err
}

func (t thumbDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Thumb, err error) {
	buf := make([]*model.Thumb, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t thumbDo) FindInBatches(result *[]*model.Thumb, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t thumbDo) Attrs(attrs ...field.AssignExpr) IThumbDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t thumbDo) Assign(attrs ...field.AssignExpr) IThumbDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t thumbDo) Joins(fields ...field.RelationField) IThumbDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t thumbDo) Preload(fields ...field.RelationField) IThumbDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t thumbDo) FirstOrInit() (*model.Thumb, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Thumb), nil
	}
}

func (t thumbDo) FirstOrCreate() (*model.Thumb, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Thumb), nil
	}
}

func (t thumbDo) FindByPage(offset int, limit int) (result []*model.Thumb, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t thumbDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t thumbDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t thumbDo) Delete(models ...*model.Thumb) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *thumbDo) withDO(do gen.Dao) *thumbDo {
	t.DO = *do.(*gen.DO)
	return t
}
