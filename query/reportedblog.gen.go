// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GinProject/model"
)

func newReportedblog(db *gorm.DB, opts ...gen.DOOption) reportedblog {
	_reportedblog := reportedblog{}

	_reportedblog.reportedblogDo.UseDB(db, opts...)
	_reportedblog.reportedblogDo.UseModel(&model.Reportedblog{})

	tableName := _reportedblog.reportedblogDo.TableName()
	_reportedblog.ALL = field.NewAsterisk(tableName)
	_reportedblog.RBlogID = field.NewInt64(tableName, "r_blog_id")
	_reportedblog.UserID = field.NewInt64(tableName, "user_id")
	_reportedblog.Content = field.NewString(tableName, "content")
	_reportedblog.Title = field.NewString(tableName, "title")
	_reportedblog.Introduce = field.NewString(tableName, "introduce")
	_reportedblog.Image = field.NewString(tableName, "image")
	_reportedblog.File = field.NewString(tableName, "file")
	_reportedblog.Time = field.NewString(tableName, "time")
	_reportedblog.BlogClass = field.NewString(tableName, "blog_class")
	_reportedblog.Tag = field.NewString(tableName, "tag")
	_reportedblog.ReportReason = field.NewString(tableName, "report_reason")
	_reportedblog.AiComment = field.NewString(tableName, "ai_comment")
	_reportedblog.AssistantComment = field.NewString(tableName, "assistant_comment")
	_reportedblog.Status = field.NewString(tableName, "status")
	_reportedblog.UserName = field.NewString(tableName, "user_name")

	_reportedblog.fillFieldMap()

	return _reportedblog
}

type reportedblog struct {
	reportedblogDo reportedblogDo

	ALL              field.Asterisk
	RBlogID          field.Int64
	UserID           field.Int64
	Content          field.String
	Title            field.String
	Introduce        field.String
	Image            field.String
	File             field.String
	Time             field.String
	BlogClass        field.String
	Tag              field.String
	ReportReason     field.String
	AiComment        field.String
	AssistantComment field.String
	Status           field.String
	UserName         field.String

	fieldMap map[string]field.Expr
}

func (r reportedblog) Table(newTableName string) *reportedblog {
	r.reportedblogDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reportedblog) As(alias string) *reportedblog {
	r.reportedblogDo.DO = *(r.reportedblogDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reportedblog) updateTableName(table string) *reportedblog {
	r.ALL = field.NewAsterisk(table)
	r.RBlogID = field.NewInt64(table, "r_blog_id")
	r.UserID = field.NewInt64(table, "user_id")
	r.Content = field.NewString(table, "content")
	r.Title = field.NewString(table, "title")
	r.Introduce = field.NewString(table, "introduce")
	r.Image = field.NewString(table, "image")
	r.File = field.NewString(table, "file")
	r.Time = field.NewString(table, "time")
	r.BlogClass = field.NewString(table, "blog_class")
	r.Tag = field.NewString(table, "tag")
	r.ReportReason = field.NewString(table, "report_reason")
	r.AiComment = field.NewString(table, "ai_comment")
	r.AssistantComment = field.NewString(table, "assistant_comment")
	r.Status = field.NewString(table, "status")
	r.UserName = field.NewString(table, "user_name")

	r.fillFieldMap()

	return r
}

func (r *reportedblog) WithContext(ctx context.Context) IReportedblogDo {
	return r.reportedblogDo.WithContext(ctx)
}

func (r reportedblog) TableName() string { return r.reportedblogDo.TableName() }

func (r reportedblog) Alias() string { return r.reportedblogDo.Alias() }

func (r reportedblog) Columns(cols ...field.Expr) gen.Columns {
	return r.reportedblogDo.Columns(cols...)
}

func (r *reportedblog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reportedblog) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 15)
	r.fieldMap["r_blog_id"] = r.RBlogID
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["content"] = r.Content
	r.fieldMap["title"] = r.Title
	r.fieldMap["introduce"] = r.Introduce
	r.fieldMap["image"] = r.Image
	r.fieldMap["file"] = r.File
	r.fieldMap["time"] = r.Time
	r.fieldMap["blog_class"] = r.BlogClass
	r.fieldMap["tag"] = r.Tag
	r.fieldMap["report_reason"] = r.ReportReason
	r.fieldMap["ai_comment"] = r.AiComment
	r.fieldMap["assistant_comment"] = r.AssistantComment
	r.fieldMap["status"] = r.Status
	r.fieldMap["user_name"] = r.UserName
}

func (r reportedblog) clone(db *gorm.DB) reportedblog {
	r.reportedblogDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reportedblog) replaceDB(db *gorm.DB) reportedblog {
	r.reportedblogDo.ReplaceDB(db)
	return r
}

type reportedblogDo struct{ gen.DO }

type IReportedblogDo interface {
	gen.SubQuery
	Debug() IReportedblogDo
	WithContext(ctx context.Context) IReportedblogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReportedblogDo
	WriteDB() IReportedblogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReportedblogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReportedblogDo
	Not(conds ...gen.Condition) IReportedblogDo
	Or(conds ...gen.Condition) IReportedblogDo
	Select(conds ...field.Expr) IReportedblogDo
	Where(conds ...gen.Condition) IReportedblogDo
	Order(conds ...field.Expr) IReportedblogDo
	Distinct(cols ...field.Expr) IReportedblogDo
	Omit(cols ...field.Expr) IReportedblogDo
	Join(table schema.Tabler, on ...field.Expr) IReportedblogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReportedblogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReportedblogDo
	Group(cols ...field.Expr) IReportedblogDo
	Having(conds ...gen.Condition) IReportedblogDo
	Limit(limit int) IReportedblogDo
	Offset(offset int) IReportedblogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReportedblogDo
	Unscoped() IReportedblogDo
	Create(values ...*model.Reportedblog) error
	CreateInBatches(values []*model.Reportedblog, batchSize int) error
	Save(values ...*model.Reportedblog) error
	First() (*model.Reportedblog, error)
	Take() (*model.Reportedblog, error)
	Last() (*model.Reportedblog, error)
	Find() ([]*model.Reportedblog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Reportedblog, err error)
	FindInBatches(result *[]*model.Reportedblog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Reportedblog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReportedblogDo
	Assign(attrs ...field.AssignExpr) IReportedblogDo
	Joins(fields ...field.RelationField) IReportedblogDo
	Preload(fields ...field.RelationField) IReportedblogDo
	FirstOrInit() (*model.Reportedblog, error)
	FirstOrCreate() (*model.Reportedblog, error)
	FindByPage(offset int, limit int) (result []*model.Reportedblog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReportedblogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r reportedblogDo) Debug() IReportedblogDo {
	return r.withDO(r.DO.Debug())
}

func (r reportedblogDo) WithContext(ctx context.Context) IReportedblogDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reportedblogDo) ReadDB() IReportedblogDo {
	return r.Clauses(dbresolver.Read)
}

func (r reportedblogDo) WriteDB() IReportedblogDo {
	return r.Clauses(dbresolver.Write)
}

func (r reportedblogDo) Session(config *gorm.Session) IReportedblogDo {
	return r.withDO(r.DO.Session(config))
}

func (r reportedblogDo) Clauses(conds ...clause.Expression) IReportedblogDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reportedblogDo) Returning(value interface{}, columns ...string) IReportedblogDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reportedblogDo) Not(conds ...gen.Condition) IReportedblogDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reportedblogDo) Or(conds ...gen.Condition) IReportedblogDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reportedblogDo) Select(conds ...field.Expr) IReportedblogDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reportedblogDo) Where(conds ...gen.Condition) IReportedblogDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reportedblogDo) Order(conds ...field.Expr) IReportedblogDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reportedblogDo) Distinct(cols ...field.Expr) IReportedblogDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reportedblogDo) Omit(cols ...field.Expr) IReportedblogDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reportedblogDo) Join(table schema.Tabler, on ...field.Expr) IReportedblogDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reportedblogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReportedblogDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reportedblogDo) RightJoin(table schema.Tabler, on ...field.Expr) IReportedblogDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reportedblogDo) Group(cols ...field.Expr) IReportedblogDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reportedblogDo) Having(conds ...gen.Condition) IReportedblogDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reportedblogDo) Limit(limit int) IReportedblogDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reportedblogDo) Offset(offset int) IReportedblogDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reportedblogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReportedblogDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reportedblogDo) Unscoped() IReportedblogDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reportedblogDo) Create(values ...*model.Reportedblog) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reportedblogDo) CreateInBatches(values []*model.Reportedblog, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reportedblogDo) Save(values ...*model.Reportedblog) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reportedblogDo) First() (*model.Reportedblog, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Reportedblog), nil
	}
}

func (r reportedblogDo) Take() (*model.Reportedblog, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Reportedblog), nil
	}
}

func (r reportedblogDo) Last() (*model.Reportedblog, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Reportedblog), nil
	}
}

func (r reportedblogDo) Find() ([]*model.Reportedblog, error) {
	result, err := r.DO.Find()
	return result.([]*model.Reportedblog), err
}

func (r reportedblogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Reportedblog, err error) {
	buf := make([]*model.Reportedblog, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reportedblogDo) FindInBatches(result *[]*model.Reportedblog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reportedblogDo) Attrs(attrs ...field.AssignExpr) IReportedblogDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reportedblogDo) Assign(attrs ...field.AssignExpr) IReportedblogDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reportedblogDo) Joins(fields ...field.RelationField) IReportedblogDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reportedblogDo) Preload(fields ...field.RelationField) IReportedblogDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reportedblogDo) FirstOrInit() (*model.Reportedblog, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Reportedblog), nil
	}
}

func (r reportedblogDo) FirstOrCreate() (*model.Reportedblog, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Reportedblog), nil
	}
}

func (r reportedblogDo) FindByPage(offset int, limit int) (result []*model.Reportedblog, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reportedblogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reportedblogDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reportedblogDo) Delete(models ...*model.Reportedblog) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reportedblogDo) withDO(do gen.Dao) *reportedblogDo {
	r.DO = *do.(*gen.DO)
	return r
}
