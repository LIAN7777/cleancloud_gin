// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	Admin        *admin
	Adminmessage *adminmessage
	Blog         *blog
	Comment      *comment
	Favorite     *favorite
	Follow       *follow
	Report       *report
	Reportedblog *reportedblog
	Thumb        *thumb
	User         *user
	Usermessage  *usermessage
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Admin = &Q.Admin
	Adminmessage = &Q.Adminmessage
	Blog = &Q.Blog
	Comment = &Q.Comment
	Favorite = &Q.Favorite
	Follow = &Q.Follow
	Report = &Q.Report
	Reportedblog = &Q.Reportedblog
	Thumb = &Q.Thumb
	User = &Q.User
	Usermessage = &Q.Usermessage
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Admin:        newAdmin(db, opts...),
		Adminmessage: newAdminmessage(db, opts...),
		Blog:         newBlog(db, opts...),
		Comment:      newComment(db, opts...),
		Favorite:     newFavorite(db, opts...),
		Follow:       newFollow(db, opts...),
		Report:       newReport(db, opts...),
		Reportedblog: newReportedblog(db, opts...),
		Thumb:        newThumb(db, opts...),
		User:         newUser(db, opts...),
		Usermessage:  newUsermessage(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Admin        admin
	Adminmessage adminmessage
	Blog         blog
	Comment      comment
	Favorite     favorite
	Follow       follow
	Report       report
	Reportedblog reportedblog
	Thumb        thumb
	User         user
	Usermessage  usermessage
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Admin:        q.Admin.clone(db),
		Adminmessage: q.Adminmessage.clone(db),
		Blog:         q.Blog.clone(db),
		Comment:      q.Comment.clone(db),
		Favorite:     q.Favorite.clone(db),
		Follow:       q.Follow.clone(db),
		Report:       q.Report.clone(db),
		Reportedblog: q.Reportedblog.clone(db),
		Thumb:        q.Thumb.clone(db),
		User:         q.User.clone(db),
		Usermessage:  q.Usermessage.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Admin:        q.Admin.replaceDB(db),
		Adminmessage: q.Adminmessage.replaceDB(db),
		Blog:         q.Blog.replaceDB(db),
		Comment:      q.Comment.replaceDB(db),
		Favorite:     q.Favorite.replaceDB(db),
		Follow:       q.Follow.replaceDB(db),
		Report:       q.Report.replaceDB(db),
		Reportedblog: q.Reportedblog.replaceDB(db),
		Thumb:        q.Thumb.replaceDB(db),
		User:         q.User.replaceDB(db),
		Usermessage:  q.Usermessage.replaceDB(db),
	}
}

type queryCtx struct {
	Admin        IAdminDo
	Adminmessage IAdminmessageDo
	Blog         IBlogDo
	Comment      ICommentDo
	Favorite     IFavoriteDo
	Follow       IFollowDo
	Report       IReportDo
	Reportedblog IReportedblogDo
	Thumb        IThumbDo
	User         IUserDo
	Usermessage  IUsermessageDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Admin:        q.Admin.WithContext(ctx),
		Adminmessage: q.Adminmessage.WithContext(ctx),
		Blog:         q.Blog.WithContext(ctx),
		Comment:      q.Comment.WithContext(ctx),
		Favorite:     q.Favorite.WithContext(ctx),
		Follow:       q.Follow.WithContext(ctx),
		Report:       q.Report.WithContext(ctx),
		Reportedblog: q.Reportedblog.WithContext(ctx),
		Thumb:        q.Thumb.WithContext(ctx),
		User:         q.User.WithContext(ctx),
		Usermessage:  q.Usermessage.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
